   1               		.file	"shift_reg_library.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 102               	.global	shiftOne
 104               	shiftOne:
   1:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** #include <avr/io.h>
   2:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** #include <util/delay.h>
   3:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** 
   4:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** 
   5:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** #include "shift_reg_library.h"
   6:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** 
   7:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** void shiftOne(void){
 106               	.LM0:
 107               	.LFBB1:
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
   8:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     
   9:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = 1<<2;
 113               	.LM1:
 114 0000 84E0      		ldi r24,lo8(4)
 115 0002 85B9      		out 0x5,r24
 116               	.LBB14:
 117               	.LBB15:
 119               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 121               	.LM2:
 122 0004 2FEF      		ldi r18,lo8(159999)
 123 0006 80E7      		ldi r24,hi8(159999)
 124 0008 92E0      		ldi r25,hlo8(159999)
 125 000a 2150      		1: subi r18,1
 126 000c 8040      		sbci r24,0
 127 000e 9040      		sbci r25,0
 128 0010 01F4      		brne 1b
 129 0012 00C0      		rjmp .
 130 0014 0000      		nop
 131               	.LBE15:
 132               	.LBE14:
 134               	.Ltext2:
  10:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         _delay_ms(100);
  11:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = (1<<2)|(1<<0);
 136               	.LM3:
 137 0016 85E0      		ldi r24,lo8(5)
 138 0018 85B9      		out 0x5,r24
 139               	.LBB16:
 140               	.LBB17:
 142               	.Ltext3:
 144               	.LM4:
 145 001a 2FEF      		ldi r18,lo8(159999)
 146 001c 80E7      		ldi r24,hi8(159999)
 147 001e 92E0      		ldi r25,hlo8(159999)
 148 0020 2150      		1: subi r18,1
 149 0022 8040      		sbci r24,0
 150 0024 9040      		sbci r25,0
 151 0026 01F4      		brne 1b
 152 0028 00C0      		rjmp .
 153 002a 0000      		nop
 154               	.LBE17:
 155               	.LBE16:
 157               	.Ltext4:
  12:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         _delay_ms(100);
  13:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = 0<<0;
 159               	.LM5:
 160 002c 15B8      		out 0x5,__zero_reg__
 161               	.LBB18:
 162               	.LBB19:
 164               	.Ltext5:
 166               	.LM6:
 167 002e 2FEF      		ldi r18,lo8(159999)
 168 0030 80E7      		ldi r24,hi8(159999)
 169 0032 92E0      		ldi r25,hlo8(159999)
 170 0034 2150      		1: subi r18,1
 171 0036 8040      		sbci r24,0
 172 0038 9040      		sbci r25,0
 173 003a 01F4      		brne 1b
 174 003c 00C0      		rjmp .
 175 003e 0000      		nop
 176 0040 0895      		ret
 177               	.LBE19:
 178               	.LBE18:
 180               	.Lscope1:
 182               	.global	shiftNull
 184               	shiftNull:
 186               	.Ltext6:
  14:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         _delay_ms(100);
  15:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** 
  16:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     
  17:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** }
  18:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** 
  19:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** void shiftNull(void){
 188               	.LM7:
 189               	.LFBB2:
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 192               	/* stack size = 0 */
 193               	.L__stack_usage = 0
  20:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     
  21:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = 0<<2;
 195               	.LM8:
 196 0042 15B8      		out 0x5,__zero_reg__
 197               	.LBB20:
 198               	.LBB21:
 200               	.Ltext7:
 202               	.LM9:
 203 0044 2FEF      		ldi r18,lo8(159999)
 204 0046 80E7      		ldi r24,hi8(159999)
 205 0048 92E0      		ldi r25,hlo8(159999)
 206 004a 2150      		1: subi r18,1
 207 004c 8040      		sbci r24,0
 208 004e 9040      		sbci r25,0
 209 0050 01F4      		brne 1b
 210 0052 00C0      		rjmp .
 211 0054 0000      		nop
 212               	.LBE21:
 213               	.LBE20:
 215               	.Ltext8:
  22:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         _delay_ms(100);
  23:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = (0<<2)|(1<<0);
 217               	.LM10:
 218 0056 81E0      		ldi r24,lo8(1)
 219 0058 85B9      		out 0x5,r24
 220               	.LBB22:
 221               	.LBB23:
 223               	.Ltext9:
 225               	.LM11:
 226 005a 2FEF      		ldi r18,lo8(159999)
 227 005c 80E7      		ldi r24,hi8(159999)
 228 005e 92E0      		ldi r25,hlo8(159999)
 229 0060 2150      		1: subi r18,1
 230 0062 8040      		sbci r24,0
 231 0064 9040      		sbci r25,0
 232 0066 01F4      		brne 1b
 233 0068 00C0      		rjmp .
 234 006a 0000      		nop
 235               	.LBE23:
 236               	.LBE22:
 238               	.Ltext10:
  24:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         _delay_ms(100);
  25:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = 0<<0;
 240               	.LM12:
 241 006c 15B8      		out 0x5,__zero_reg__
 242               	.LBB24:
 243               	.LBB25:
 245               	.Ltext11:
 247               	.LM13:
 248 006e 2FEF      		ldi r18,lo8(159999)
 249 0070 80E7      		ldi r24,hi8(159999)
 250 0072 92E0      		ldi r25,hlo8(159999)
 251 0074 2150      		1: subi r18,1
 252 0076 8040      		sbci r24,0
 253 0078 9040      		sbci r25,0
 254 007a 01F4      		brne 1b
 255 007c 00C0      		rjmp .
 256 007e 0000      		nop
 257 0080 0895      		ret
 258               	.LBE25:
 259               	.LBE24:
 261               	.Lscope2:
 263               	.global	serialSend
 265               	serialSend:
 267               	.Ltext12:
  26:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         _delay_ms(100);
  27:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     
  28:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** }
  29:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** 
  30:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c **** void serialSend(void){
 269               	.LM14:
 270               	.LFBB3:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
  31:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     
  32:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = 1<<1;
 276               	.LM15:
 277 0082 82E0      		ldi r24,lo8(2)
 278 0084 85B9      		out 0x5,r24
  33:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****         //_delay_ms(100);
  34:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/shift_reg_library.c ****     PORTB = 0<<1;
 280               	.LM16:
 281 0086 15B8      		out 0x5,__zero_reg__
 282 0088 0895      		ret
 284               	.Lscope3:
 286               	.Letext0:
 287               		.ident	"GCC: (GNU) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 shift_reg_library.c
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:2      *ABS*:0000003e __SP_H__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:3      *ABS*:0000003d __SP_L__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:4      *ABS*:0000003f __SREG__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:6      *ABS*:00000001 __zero_reg__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:104    .text:00000000 shiftOne
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:184    .text:00000042 shiftNull
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccAk76E5.s:265    .text:00000082 serialSend

NO UNDEFINED SYMBOLS
