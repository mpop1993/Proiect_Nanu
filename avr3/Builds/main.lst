   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 101               		.section	.text.startup,"ax",@progbits
 103               	.global	main
 105               	main:
   1:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** # define F_CPU 16000000UL
   2:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** 
   3:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** #include <avr/io.h>
   4:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** #include <util/delay.h>
   5:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** #include <avr/interrupt.h>
   6:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** 
   7:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** #include <timer_library.h>
   8:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** #include <display_library.h>
   9:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** #include <pwm_library.h>
  10:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** 
  11:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** int i=0;
  12:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** double ms=400;
  13:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** 
  14:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** int main(void) {
 107               	.LM0:
 108               	.LFBB1:
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  15:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** 
  16:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     //timer_1(1000); // set value in ms
  17:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     
  18:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     DDRD = 0xff;
 114               	.LM1:
 115 0000 8FEF      		ldi r24,lo8(-1)
 116 0002 8AB9      		out 0xa,r24
  19:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     DDRB = 0xff;
 118               	.LM2:
 119 0004 84B9      		out 0x4,r24
 120               	.L2:
  20:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     
  21:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     
  22:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c **** 
  23:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****     while(1){
  24:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****         while(i<1020){
 122               	.LM3:
 123 0006 4091 0000 		lds r20,i
 124 000a 5091 0000 		lds r21,i+1
 125 000e 4C3F      		cpi r20,-4
 126 0010 93E0      		ldi r25,3
 127 0012 5907      		cpc r21,r25
 128 0014 04F4      		brge .L10
  25:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****             i=i+5;
 130               	.LM4:
 131 0016 4B5F      		subi r20,-5
 132 0018 5F4F      		sbci r21,-1
 133 001a 5093 0000 		sts i+1,r21
 134 001e 4093 0000 		sts i,r20
  26:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****             pwmGenerator(6, 1024, i);
 136               	.LM5:
 137 0022 60E0      		ldi r22,0
 138 0024 74E0      		ldi r23,lo8(4)
 139 0026 86E0      		ldi r24,lo8(6)
 140 0028 90E0      		ldi r25,0
 141 002a 0E94 0000 		call pwmGenerator
 142               	.LBB10:
 143               	.LBB11:
 145               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 147               	.LM6:
 148 002e 8FE3      		ldi r24,lo8(-25537)
 149 0030 9CE9      		ldi r25,hi8(-25537)
 150 0032 0197      		1: sbiw r24,1
 151 0034 01F4      		brne 1b
 152               	.L7:
 153 0036 00C0      		rjmp .
 154 0038 0000      		nop
 155 003a 00C0      		rjmp .L2
 156               	.L10:
 157               	.LBE11:
 158               	.LBE10:
 159               	.LBB12:
 160               	.LBB13:
 161 003c 2FEF      		ldi r18,lo8(3199999)
 162 003e 83ED      		ldi r24,hi8(3199999)
 163 0040 90E3      		ldi r25,hlo8(3199999)
 164 0042 2150      		1: subi r18,1
 165 0044 8040      		sbci r24,0
 166 0046 9040      		sbci r25,0
 167 0048 01F4      		brne 1b
 168               	.L8:
 169               	.LBE13:
 170               	.LBE12:
 171               	.LBB14:
 172               	.LBB15:
 173 004a 00C0      		rjmp .
 174 004c 0000      		nop
 175               	.LBE15:
 176               	.LBE14:
 178               	.Ltext2:
  27:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****             _delay_ms(10);
  28:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****         }
  29:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****         _delay_ms(1000);
  30:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****         while(i>0){
 180               	.LM7:
 181 004e 4091 0000 		lds r20,i
 182 0052 5091 0000 		lds r21,i+1
 183 0056 1416      		cp __zero_reg__,r20
 184 0058 1506      		cpc __zero_reg__,r21
 185 005a 04F4      		brge .L11
  31:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****             i=i-5;
 187               	.LM8:
 188 005c 4550      		subi r20,5
 189 005e 5109      		sbc r21,__zero_reg__
 190 0060 5093 0000 		sts i+1,r21
 191 0064 4093 0000 		sts i,r20
  32:/Users/Mihai/Documents/GitHub/Proiect_Nanu/avr3/main.c ****             pwmGenerator(6, 1024, i);
 193               	.LM9:
 194 0068 60E0      		ldi r22,0
 195 006a 74E0      		ldi r23,lo8(4)
 196 006c 86E0      		ldi r24,lo8(6)
 197 006e 90E0      		ldi r25,0
 198 0070 0E94 0000 		call pwmGenerator
 199               	.LBB17:
 200               	.LBB16:
 202               	.Ltext3:
 204               	.LM10:
 205 0074 8FE3      		ldi r24,lo8(-25537)
 206 0076 9CE9      		ldi r25,hi8(-25537)
 207 0078 0197      		1: sbiw r24,1
 208 007a 01F4      		brne 1b
 209 007c 00C0      		rjmp .L8
 210               	.L11:
 211               	.LBE16:
 212               	.LBE17:
 213               	.LBB18:
 214               	.LBB19:
 215 007e 9FEF      		ldi r25,lo8(3199999)
 216 0080 23ED      		ldi r18,hi8(3199999)
 217 0082 80E3      		ldi r24,hlo8(3199999)
 218 0084 9150      		1: subi r25,1
 219 0086 2040      		sbci r18,0
 220 0088 8040      		sbci r24,0
 221 008a 01F4      		brne 1b
 222 008c 00C0      		rjmp .L7
 223               	.LBE19:
 224               	.LBE18:
 226               	.Lscope1:
 227               	.global	ms
 228               		.data
 231               	ms:
 232 0000 00        		.byte	0
 233 0001 00        		.byte	0
 234 0002 C8        		.byte	-56
 235 0003 43        		.byte	67
 236               	.global	i
 237               		.section .bss
 240               	i:
 241 0000 0000      		.zero	2
 244               		.text
 246               	.Letext0:
 247               		.ident	"GCC: (GNU) 4.8.1"
 248               	.global __do_copy_data
 249               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:2      *ABS*:0000003e __SP_H__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:3      *ABS*:0000003d __SP_L__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:4      *ABS*:0000003f __SREG__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:6      *ABS*:00000001 __zero_reg__
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:105    .text.startup:00000000 main
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:240    .bss:00000000 i
/var/folders/0l/v5bxx64s22z65_nc6ss582bm0000gn/T//ccIlwEgq.s:231    .data:00000000 ms

UNDEFINED SYMBOLS
pwmGenerator
__do_copy_data
__do_clear_bss
