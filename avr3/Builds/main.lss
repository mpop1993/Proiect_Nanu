
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000af2  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  00000b88  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f57  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003b7f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00003b90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  00003fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ea  00000000  00000000  0000404a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
  9e:	0c 94 77 05 	jmp	0xaee	; 0xaee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EEPROM_write>:

{
    
    /* Wait for completion of previous write */
    
    while(EECR & (1<<EEPE)); // EEPROM write enabled = EEPE
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <EEPROM_write>
    
    /* Set up address and data registers */
    
    EEAR = uiAddress;
  aa:	92 bd       	out	0x22, r25	; 34
  ac:	81 bd       	out	0x21, r24	; 33
    
    EEDR = ucData;
  ae:	60 bd       	out	0x20, r22	; 32
    
    /* Write logical one to EEMWE */
    
    EECR |= (1<<EEMPE); // EEPROM master write enabled = EEMPE
  b0:	fa 9a       	sbi	0x1f, 2	; 31
    
    /* Start eeprom write by setting EEWE */
    
    EECR |= (1<<EEPE);
  b2:	f9 9a       	sbi	0x1f, 1	; 31
  b4:	08 95       	ret

000000b6 <EEPROM_read>:

{
    
    /* Wait for completion of previous write */
    
    while(EECR & (1<<EEPE));
  b6:	f9 99       	sbic	0x1f, 1	; 31
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <EEPROM_read>
    
    /* Set up address register */
    
    EEAR = uiAddress;
  ba:	92 bd       	out	0x22, r25	; 34
  bc:	81 bd       	out	0x21, r24	; 33
    
    /* Start eeprom read by writing EERE */
    
    EECR |= (1<<EEMPE);
  be:	fa 9a       	sbi	0x1f, 2	; 31
    
    /* Return data from data register */
    
    return EEDR;
  c0:	80 b5       	in	r24, 0x20	; 32
    
  c2:	08 95       	ret

000000c4 <zero>:

#include "display_library.h"

#include "shift_reg_library.h"

void zero(int number){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
    
    shiftNull(number);
  ca:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
  e0:	ce 01       	movw	r24, r28
  e2:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
  e6:	ce 01       	movw	r24, r28
  e8:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
  ec:	ce 01       	movw	r24, r28
  ee:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
  f2:	ce 01       	movw	r24, r28
  f4:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    serialSend();
    
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    shiftNull(number);
    serialSend();
  fc:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

00000100 <one>:
    
}
void one(int number){
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 106:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 110:	ce 01       	movw	r24, r28
 112:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 116:	ce 01       	movw	r24, r28
 118:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 122:	ce 01       	movw	r24, r28
 124:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 12e:	ce 01       	movw	r24, r28
 130:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    serialSend();
    
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
    shiftNull(number);
    shiftOne(number);
    shiftNull(number);
    shiftNull(number);
    shiftNull(number);
    serialSend();
 138:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

0000013c <two>:
    
}

void two(int number){
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 142:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 146:	ce 01       	movw	r24, r28
 148:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 152:	ce 01       	movw	r24, r28
 154:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 164:	ce 01       	movw	r24, r28
 166:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    shiftNull(number);
    shiftOne(number);
    serialSend();
 174:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

00000178 <three>:
    
}
void three(int number){
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 17e:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 182:	ce 01       	movw	r24, r28
 184:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 18e:	ce 01       	movw	r24, r28
 190:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 194:	ce 01       	movw	r24, r28
 196:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
    shiftNull(number);
    shiftOne(number);
    shiftOne(number);
    shiftNull(number);
    shiftOne(number);
    serialSend();
 1b0:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

000001b4 <four>:
    
}
void four(int number){
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 1ba:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 1ca:	ce 01       	movw	r24, r28
 1cc:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 1d6:	ce 01       	movw	r24, r28
 1d8:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 1dc:	ce 01       	movw	r24, r28
 1de:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
    shiftNull(number);
    shiftOne(number);
    shiftNull(number);
    shiftOne(number);
    shiftOne(number);
    serialSend();
 1ec:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

000001f0 <five>:
    
}
void five(int number){
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 1f6:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 1fa:	ce 01       	movw	r24, r28
 1fc:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 200:	ce 01       	movw	r24, r28
 202:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 206:	ce 01       	movw	r24, r28
 208:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 20c:	ce 01       	movw	r24, r28
 20e:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 212:	ce 01       	movw	r24, r28
 214:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 218:	ce 01       	movw	r24, r28
 21a:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
    shiftNull(number);
    shiftNull(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    serialSend();
 228:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

0000022c <six>:
    
}
void six(int number){
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 232:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 236:	ce 01       	movw	r24, r28
 238:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 242:	ce 01       	movw	r24, r28
 244:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 254:	ce 01       	movw	r24, r28
 256:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
    shiftOne(number);
    shiftNull(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    serialSend();
 264:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

00000268 <seven>:
    
}
void seven(int number){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 26e:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 272:	ce 01       	movw	r24, r28
 274:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 284:	ce 01       	movw	r24, r28
 286:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 290:	ce 01       	movw	r24, r28
 292:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 296:	ce 01       	movw	r24, r28
 298:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    serialSend();
    
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
    shiftNull(number);
    shiftOne(number);
    shiftOne(number);
    shiftNull(number);
    shiftNull(number);
    serialSend();
 2a0:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

000002a4 <eight>:
    
}
void eight(int number){
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 2aa:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 2ae:	ce 01       	movw	r24, r28
 2b0:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2b4:	ce 01       	movw	r24, r28
 2b6:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2ba:	ce 01       	movw	r24, r28
 2bc:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2c0:	ce 01       	movw	r24, r28
 2c2:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2c6:	ce 01       	movw	r24, r28
 2c8:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    serialSend();
 2dc:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

000002e0 <nine>:
    
}

void nine(int number){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 2e6:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftNull(number);
 2f6:	ce 01       	movw	r24, r28
 2f8:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftOne(number);
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 302:	ce 01       	movw	r24, r28
 304:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    shiftOne(number);
 30e:	ce 01       	movw	r24, r28
 310:	0e 94 05 02 	call	0x40a	; 0x40a <shiftOne>
    serialSend();
    
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
    shiftNull(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    shiftOne(number);
    serialSend();
 318:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

0000031c <clear>:
    
}

void clear(int number){
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
    
    shiftNull(number);
 322:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 326:	ce 01       	movw	r24, r28
 328:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 332:	ce 01       	movw	r24, r28
 334:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 33e:	ce 01       	movw	r24, r28
 340:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 344:	ce 01       	movw	r24, r28
 346:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    shiftNull(number);
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 2c 02 	call	0x458	; 0x458 <shiftNull>
    serialSend();
    
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
    shiftNull(number);
    shiftNull(number);
    shiftNull(number);
    shiftNull(number);
    shiftNull(number);
    serialSend();
 354:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <serialSend>

00000358 <__vector_1>:
    
	return 0;     
}

ISR (INT0_vect)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
    i++;
 368:	80 91 08 01 	lds	r24, 0x0108
 36c:	90 91 09 01 	lds	r25, 0x0109
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 09 01 	sts	0x0109, r25
 376:	80 93 08 01 	sts	0x0108, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	80 e7       	ldi	r24, 0x70	; 112
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <__vector_1+0x28>
 388:	00 c0       	rjmp	.+0      	; 0x38a <__vector_1+0x32>
 38a:	00 00       	nop
    _delay_ms(50);
    PORTB = 1<<0;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	85 b9       	out	0x05, r24	; 5
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	80 e7       	ldi	r24, 0x70	; 112
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <__vector_1+0x3e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <__vector_1+0x48>
 3a0:	00 00       	nop
    _delay_ms(50);
    PORTB = 0<<0;
 3a2:	15 b8       	out	0x05, r1	; 5
}
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <pwm_6>:
#include "timer_library.h"


void pwm_6(int prescaler, int duty){
    
    cli();
 3b4:	f8 94       	cli

   // OCR0A |= 255; // Output Compare Register 0 A ( -> valoarea pana la care numara)
    
    TCCR1A |= (1<<COM1A1);
 3b6:	20 91 80 00 	lds	r18, 0x0080
 3ba:	20 68       	ori	r18, 0x80	; 128
 3bc:	20 93 80 00 	sts	0x0080, r18
    
    TCCR1A |= (1<<WGM10);
 3c0:	20 91 80 00 	lds	r18, 0x0080
 3c4:	21 60       	ori	r18, 0x01	; 1
 3c6:	20 93 80 00 	sts	0x0080, r18
    TCCR1A |= (1<<WGM11);
 3ca:	20 91 80 00 	lds	r18, 0x0080
 3ce:	22 60       	ori	r18, 0x02	; 2
 3d0:	20 93 80 00 	sts	0x0080, r18
    TCCR1B |= (1<<WGM12);
 3d4:	20 91 81 00 	lds	r18, 0x0081
 3d8:	28 60       	ori	r18, 0x08	; 8
 3da:	20 93 81 00 	sts	0x0081, r18
    // 10 bit Fast PWM - timer operation mode
    
    if(prescaler == 1024){
 3de:	81 15       	cp	r24, r1
 3e0:	94 40       	sbci	r25, 0x04	; 4
 3e2:	29 f4       	brne	.+10     	; 0x3ee <pwm_6+0x3a>
       // TCCR1B |= (1<<CS10); // Set prescaler
        TCCR1B |= (1<<CS12); // Set prescaler
 3e4:	80 91 81 00 	lds	r24, 0x0081
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	80 93 81 00 	sts	0x0081, r24
    }
    
    OCR1A = duty;
 3ee:	70 93 89 00 	sts	0x0089, r23
 3f2:	60 93 88 00 	sts	0x0088, r22
    
    sei();
 3f6:	78 94       	sei
 3f8:	08 95       	ret

000003fa <pwmGenerator>:
    
}


void pwmGenerator(int pinNumber, int prescaler, int duty)
{
 3fa:	9b 01       	movw	r18, r22
    if(pinNumber == 6){
 3fc:	06 97       	sbiw	r24, 0x06	; 6
 3fe:	21 f4       	brne	.+8      	; 0x408 <pwmGenerator+0xe>
        // set pwm on pin 3
        pwm_6(prescaler, duty);
 400:	ba 01       	movw	r22, r20
 402:	c9 01       	movw	r24, r18
 404:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <pwm_6>
 408:	08 95       	ret

0000040a <shiftOne>:

#include "shift_reg_library.h"

void shiftOne(int number){
    
    if(number==1){
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	91 05       	cpc	r25, r1
 40e:	51 f4       	brne	.+20     	; 0x424 <shiftOne+0x1a>
        PORTD = 1<<4;
 410:	80 e1       	ldi	r24, 0x10	; 16
 412:	8b b9       	out	0x0b, r24	; 11
 414:	8f e3       	ldi	r24, 0x3F	; 63
 416:	9c e9       	ldi	r25, 0x9C	; 156
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <shiftOne+0xe>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <shiftOne+0x14>
 41e:	00 00       	nop
            _delay_ms(20);
        
        PORTD = (1<<4)|(1<<3);
 420:	88 e1       	ldi	r24, 0x18	; 24
 422:	0b c0       	rjmp	.+22     	; 0x43a <shiftOne+0x30>
        
        PORTD = 0<<3;
            _delay_ms(20);
    }
    
    else if(number==2){
 424:	02 97       	sbiw	r24, 0x02	; 2
 426:	b9 f4       	brne	.+46     	; 0x456 <shiftOne+0x4c>
        PORTD = 1<<6;
 428:	80 e4       	ldi	r24, 0x40	; 64
 42a:	8b b9       	out	0x0b, r24	; 11
 42c:	8f e3       	ldi	r24, 0x3F	; 63
 42e:	9c e9       	ldi	r25, 0x9C	; 156
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <shiftOne+0x26>
 434:	00 c0       	rjmp	.+0      	; 0x436 <shiftOne+0x2c>
 436:	00 00       	nop
            _delay_ms(20);
        
        PORTD = (1<<6)|(1<<5);
 438:	80 e6       	ldi	r24, 0x60	; 96
 43a:	8b b9       	out	0x0b, r24	; 11
 43c:	8f e3       	ldi	r24, 0x3F	; 63
 43e:	9c e9       	ldi	r25, 0x9C	; 156
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <shiftOne+0x36>
 444:	00 c0       	rjmp	.+0      	; 0x446 <shiftOne+0x3c>
 446:	00 00       	nop
            _delay_ms(20);
        
        PORTD = 0<<5;
 448:	1b b8       	out	0x0b, r1	; 11
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	9c e9       	ldi	r25, 0x9C	; 156
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <shiftOne+0x44>
 452:	00 c0       	rjmp	.+0      	; 0x454 <shiftOne+0x4a>
 454:	00 00       	nop
 456:	08 95       	ret

00000458 <shiftNull>:
    }
}

void shiftNull(int number){
    
    if(number==1){
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	91 05       	cpc	r25, r1
 45c:	49 f4       	brne	.+18     	; 0x470 <shiftNull+0x18>
        PORTD = 0<<4;
 45e:	1b b8       	out	0x0b, r1	; 11
 460:	8f e3       	ldi	r24, 0x3F	; 63
 462:	9c e9       	ldi	r25, 0x9C	; 156
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <shiftNull+0xc>
 468:	00 c0       	rjmp	.+0      	; 0x46a <shiftNull+0x12>
 46a:	00 00       	nop
            _delay_ms(20);
        
        PORTD = (0<<4)|(1<<3);
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	0a c0       	rjmp	.+20     	; 0x484 <shiftNull+0x2c>
        
        PORTD = 0<<3;
            _delay_ms(20);
    }
    
    else if(number==2){
 470:	02 97       	sbiw	r24, 0x02	; 2
 472:	b1 f4       	brne	.+44     	; 0x4a0 <shiftNull+0x48>
        PORTD = 0<<6;
 474:	1b b8       	out	0x0b, r1	; 11
 476:	8f e3       	ldi	r24, 0x3F	; 63
 478:	9c e9       	ldi	r25, 0x9C	; 156
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <shiftNull+0x22>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <shiftNull+0x28>
 480:	00 00       	nop
            _delay_ms(20);
        
        PORTD = (0<<6)|(1<<5);
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	8b b9       	out	0x0b, r24	; 11
 486:	8f e3       	ldi	r24, 0x3F	; 63
 488:	9c e9       	ldi	r25, 0x9C	; 156
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <shiftNull+0x32>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <shiftNull+0x38>
 490:	00 00       	nop
            _delay_ms(20);
        
        PORTD = 0<<5;
 492:	1b b8       	out	0x0b, r1	; 11
 494:	8f e3       	ldi	r24, 0x3F	; 63
 496:	9c e9       	ldi	r25, 0x9C	; 156
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <shiftNull+0x40>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <shiftNull+0x46>
 49e:	00 00       	nop
 4a0:	08 95       	ret

000004a2 <serialSend>:
    }
}

void serialSend(void){
    
    PORTD = 1<<7;
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	8b b9       	out	0x0b, r24	; 11
 4a6:	8f e3       	ldi	r24, 0x3F	; 63
 4a8:	9c e9       	ldi	r25, 0x9C	; 156
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <serialSend+0x8>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <serialSend+0xe>
 4b0:	00 00       	nop
    _delay_ms(20);
    PORTD = 0<<7;
 4b2:	1b b8       	out	0x0b, r1	; 11
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	9c e9       	ldi	r25, 0x9C	; 156
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <serialSend+0x16>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <serialSend+0x1c>
 4be:	00 00       	nop
 4c0:	08 95       	ret

000004c2 <timer_1>:
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	4a e7       	ldi	r20, 0x7A	; 122
 4d4:	54 e4       	ldi	r21, 0x44	; 68
 4d6:	0e 94 af 03 	call	0x75e	; 0x75e <__divsf3>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	34 e2       	ldi	r19, 0x24	; 36
 4de:	44 e7       	ldi	r20, 0x74	; 116
 4e0:	56 e4       	ldi	r21, 0x46	; 70
 4e2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__mulsf3>
 4e6:	0e 94 48 04 	call	0x890	; 0x890 <floor>
 4ea:	f8 94       	cli
 4ec:	10 92 80 00 	sts	0x0080, r1
 4f0:	c1 e8       	ldi	r28, 0x81	; 129
 4f2:	d0 e0       	ldi	r29, 0x00	; 0
 4f4:	18 82       	st	Y, r1
 4f6:	08 e8       	ldi	r16, 0x88	; 136
 4f8:	10 e0       	ldi	r17, 0x00	; 0
 4fa:	f8 01       	movw	r30, r16
 4fc:	e0 80       	ld	r14, Z
 4fe:	f1 80       	ldd	r15, Z+1	; 0x01
 500:	0e 94 17 04 	call	0x82e	; 0x82e <__fixsfsi>
 504:	6e 29       	or	r22, r14
 506:	7f 29       	or	r23, r15
 508:	f8 01       	movw	r30, r16
 50a:	71 83       	std	Z+1, r23	; 0x01
 50c:	60 83       	st	Z, r22
 50e:	88 81       	ld	r24, Y
 510:	88 60       	ori	r24, 0x08	; 8
 512:	88 83       	st	Y, r24
 514:	ef e6       	ldi	r30, 0x6F	; 111
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	82 60       	ori	r24, 0x02	; 2
 51c:	80 83       	st	Z, r24
 51e:	88 81       	ld	r24, Y
 520:	81 60       	ori	r24, 0x01	; 1
 522:	88 83       	st	Y, r24
 524:	88 81       	ld	r24, Y
 526:	84 60       	ori	r24, 0x04	; 4
 528:	88 83       	st	Y, r24
 52a:	78 94       	sei
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	08 95       	ret

0000053a <main>:

unsigned int Address = 10;

int main(void) {
    
    i=EEPROM_read(Address);
 53a:	80 91 00 01 	lds	r24, 0x0100
 53e:	90 91 01 01 	lds	r25, 0x0101
 542:	0e 94 5b 00 	call	0xb6	; 0xb6 <EEPROM_read>
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	90 93 09 01 	sts	0x0109, r25
 54c:	80 93 08 01 	sts	0x0108, r24
    
    //timer_1(1000); // set value in ms
    
    DDRD = 0xf8;
 550:	88 ef       	ldi	r24, 0xF8	; 248
 552:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xff;
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	84 b9       	out	0x04, r24	; 4
    
    // set external interrupt on digital PIN 2
    cli();
 558:	f8 94       	cli
    
    PORTD |= (1 << PORTD2);    // turn On the Pull-up
 55a:	5a 9a       	sbi	0x0b, 2	; 11
    
    EICRA |= (1 << ISC00);    //
 55c:	80 91 69 00 	lds	r24, 0x0069
 560:	81 60       	ori	r24, 0x01	; 1
 562:	80 93 69 00 	sts	0x0069, r24
    EICRA |= (1 << ISC01);    // set INT0 to trigger on rising edge
 566:	80 91 69 00 	lds	r24, 0x0069
 56a:	82 60       	ori	r24, 0x02	; 2
 56c:	80 93 69 00 	sts	0x0069, r24
    
    EIMSK |= (1 << INT0);     // Turns on INT0 - external interrupt mask register
 570:	e8 9a       	sbi	0x1d, 0	; 29
    
    sei();
 572:	78 94       	sei
    
    clear(2);
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 8e 01 	call	0x31c	; 0x31c <clear>
    clear(1);
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 8e 01 	call	0x31c	; 0x31c <clear>
        
            if(i<100 && i>=1){
                
               
                
                nr_2=i%10;
 584:	ca e0       	ldi	r28, 0x0A	; 10
 586:	d0 e0       	ldi	r29, 0x00	; 0
    clear(2);
    clear(1);
    
    while(1){
        
            if(i<100 && i>=1){
 588:	80 91 08 01 	lds	r24, 0x0108
 58c:	90 91 09 01 	lds	r25, 0x0109
 590:	9c 01       	movw	r18, r24
 592:	21 50       	subi	r18, 0x01	; 1
 594:	31 09       	sbc	r19, r1
 596:	23 36       	cpi	r18, 0x63	; 99
 598:	31 05       	cpc	r19, r1
 59a:	08 f0       	brcs	.+2      	; 0x59e <main+0x64>
 59c:	cb c0       	rjmp	.+406    	; 0x734 <main+0x1fa>
                
               
                
                nr_2=i%10;
 59e:	be 01       	movw	r22, r28
 5a0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__divmodhi4>
 5a4:	90 93 03 01 	sts	0x0103, r25
 5a8:	80 93 02 01 	sts	0x0102, r24
                nr_1=i/10;
 5ac:	70 93 05 01 	sts	0x0105, r23
 5b0:	60 93 04 01 	sts	0x0104, r22
                
                if(nr_1>=1){
 5b4:	61 15       	cp	r22, r1
 5b6:	71 05       	cpc	r23, r1
 5b8:	09 f4       	brne	.+2      	; 0x5bc <main+0x82>
 5ba:	57 c0       	rjmp	.+174    	; 0x66a <main+0x130>
                    if(nr_1==0){
                        zero(1);
                    }
                    if(nr_1==1){
 5bc:	61 30       	cpi	r22, 0x01	; 1
 5be:	71 05       	cpc	r23, r1
 5c0:	21 f4       	brne	.+8      	; 0x5ca <main+0x90>
                        one(1);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 80 00 	call	0x100	; 0x100 <one>
                    }
                    if(nr_1==2){
 5ca:	80 91 04 01 	lds	r24, 0x0104
 5ce:	90 91 05 01 	lds	r25, 0x0105
 5d2:	02 97       	sbiw	r24, 0x02	; 2
 5d4:	21 f4       	brne	.+8      	; 0x5de <main+0xa4>
                        two(1);
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 9e 00 	call	0x13c	; 0x13c <two>
                    }
                    if(nr_1==3){
 5de:	80 91 04 01 	lds	r24, 0x0104
 5e2:	90 91 05 01 	lds	r25, 0x0105
 5e6:	03 97       	sbiw	r24, 0x03	; 3
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <main+0xb8>
                        three(1);
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 bc 00 	call	0x178	; 0x178 <three>
                    }
                    if(nr_1==4){
 5f2:	80 91 04 01 	lds	r24, 0x0104
 5f6:	90 91 05 01 	lds	r25, 0x0105
 5fa:	04 97       	sbiw	r24, 0x04	; 4
 5fc:	21 f4       	brne	.+8      	; 0x606 <main+0xcc>
                        four(1);
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 da 00 	call	0x1b4	; 0x1b4 <four>
                    }
                    if(nr_1==5){
 606:	80 91 04 01 	lds	r24, 0x0104
 60a:	90 91 05 01 	lds	r25, 0x0105
 60e:	05 97       	sbiw	r24, 0x05	; 5
 610:	21 f4       	brne	.+8      	; 0x61a <main+0xe0>
                        five(1);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <five>
                    }
                    if(nr_1==6){
 61a:	80 91 04 01 	lds	r24, 0x0104
 61e:	90 91 05 01 	lds	r25, 0x0105
 622:	06 97       	sbiw	r24, 0x06	; 6
 624:	21 f4       	brne	.+8      	; 0x62e <main+0xf4>
                        six(1);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 16 01 	call	0x22c	; 0x22c <six>
                    }
                    if(nr_1==7){
 62e:	80 91 04 01 	lds	r24, 0x0104
 632:	90 91 05 01 	lds	r25, 0x0105
 636:	07 97       	sbiw	r24, 0x07	; 7
 638:	21 f4       	brne	.+8      	; 0x642 <main+0x108>
                        seven(1);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 34 01 	call	0x268	; 0x268 <seven>
                    }
                    if(nr_1==8){
 642:	80 91 04 01 	lds	r24, 0x0104
 646:	90 91 05 01 	lds	r25, 0x0105
 64a:	08 97       	sbiw	r24, 0x08	; 8
 64c:	21 f4       	brne	.+8      	; 0x656 <main+0x11c>
                        eight(1);
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 52 01 	call	0x2a4	; 0x2a4 <eight>
                    }
                    if(nr_1==9){
 656:	80 91 04 01 	lds	r24, 0x0104
 65a:	90 91 05 01 	lds	r25, 0x0105
 65e:	09 97       	sbiw	r24, 0x09	; 9
 660:	21 f4       	brne	.+8      	; 0x66a <main+0x130>
                        nine(1);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 70 01 	call	0x2e0	; 0x2e0 <nine>
                    }
                }
                
                if(nr_2==0){
 66a:	80 91 02 01 	lds	r24, 0x0102
 66e:	90 91 03 01 	lds	r25, 0x0103
 672:	89 2b       	or	r24, r25
 674:	21 f4       	brne	.+8      	; 0x67e <main+0x144>
                    zero(2);
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 62 00 	call	0xc4	; 0xc4 <zero>
                }
                if(nr_2==1){
 67e:	80 91 02 01 	lds	r24, 0x0102
 682:	90 91 03 01 	lds	r25, 0x0103
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	21 f4       	brne	.+8      	; 0x692 <main+0x158>
                    one(2);
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 80 00 	call	0x100	; 0x100 <one>
                }
                if(nr_2==2){
 692:	80 91 02 01 	lds	r24, 0x0102
 696:	90 91 03 01 	lds	r25, 0x0103
 69a:	02 97       	sbiw	r24, 0x02	; 2
 69c:	21 f4       	brne	.+8      	; 0x6a6 <main+0x16c>
                    two(2);
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 9e 00 	call	0x13c	; 0x13c <two>
                }
                if(nr_2==3){
 6a6:	80 91 02 01 	lds	r24, 0x0102
 6aa:	90 91 03 01 	lds	r25, 0x0103
 6ae:	03 97       	sbiw	r24, 0x03	; 3
 6b0:	21 f4       	brne	.+8      	; 0x6ba <main+0x180>
                    three(2);
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 bc 00 	call	0x178	; 0x178 <three>
                }
                if(nr_2==4){
 6ba:	80 91 02 01 	lds	r24, 0x0102
 6be:	90 91 03 01 	lds	r25, 0x0103
 6c2:	04 97       	sbiw	r24, 0x04	; 4
 6c4:	21 f4       	brne	.+8      	; 0x6ce <main+0x194>
                    four(2);
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <four>
                }
                if(nr_2==5){
 6ce:	80 91 02 01 	lds	r24, 0x0102
 6d2:	90 91 03 01 	lds	r25, 0x0103
 6d6:	05 97       	sbiw	r24, 0x05	; 5
 6d8:	21 f4       	brne	.+8      	; 0x6e2 <main+0x1a8>
                    five(2);
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <five>
                }
                if(nr_2==6){
 6e2:	80 91 02 01 	lds	r24, 0x0102
 6e6:	90 91 03 01 	lds	r25, 0x0103
 6ea:	06 97       	sbiw	r24, 0x06	; 6
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <main+0x1bc>
                    six(2);
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 16 01 	call	0x22c	; 0x22c <six>
                }
                if(nr_2==7){
 6f6:	80 91 02 01 	lds	r24, 0x0102
 6fa:	90 91 03 01 	lds	r25, 0x0103
 6fe:	07 97       	sbiw	r24, 0x07	; 7
 700:	21 f4       	brne	.+8      	; 0x70a <main+0x1d0>
                    seven(2);
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 34 01 	call	0x268	; 0x268 <seven>
                }
                if(nr_2==8){
 70a:	80 91 02 01 	lds	r24, 0x0102
 70e:	90 91 03 01 	lds	r25, 0x0103
 712:	08 97       	sbiw	r24, 0x08	; 8
 714:	21 f4       	brne	.+8      	; 0x71e <main+0x1e4>
                    eight(2);
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <eight>
                }
                if(nr_2==9){
 71e:	80 91 02 01 	lds	r24, 0x0102
 722:	90 91 03 01 	lds	r25, 0x0103
 726:	09 97       	sbiw	r24, 0x09	; 9
 728:	89 f4       	brne	.+34     	; 0x74c <main+0x212>
                    nine(2);
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <nine>
 732:	0c c0       	rjmp	.+24     	; 0x74c <main+0x212>
                }
                
            }
            else{
                i=0;
 734:	10 92 09 01 	sts	0x0109, r1
 738:	10 92 08 01 	sts	0x0108, r1
                clear(2);
 73c:	82 e0       	ldi	r24, 0x02	; 2
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 8e 01 	call	0x31c	; 0x31c <clear>
                clear(1);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 8e 01 	call	0x31c	; 0x31c <clear>
                
            }
        
            EEPROM_write(Address, i);
 74c:	60 91 08 01 	lds	r22, 0x0108
 750:	80 91 00 01 	lds	r24, 0x0100
 754:	90 91 01 01 	lds	r25, 0x0101
 758:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write>
        
    }
 75c:	15 cf       	rjmp	.-470    	; 0x588 <main+0x4e>

0000075e <__divsf3>:
 75e:	0c d0       	rcall	.+24     	; 0x778 <__divsf3x>
 760:	ea c0       	rjmp	.+468    	; 0x936 <__fp_round>
 762:	e2 d0       	rcall	.+452    	; 0x928 <__fp_pscB>
 764:	40 f0       	brcs	.+16     	; 0x776 <__divsf3+0x18>
 766:	d9 d0       	rcall	.+434    	; 0x91a <__fp_pscA>
 768:	30 f0       	brcs	.+12     	; 0x776 <__divsf3+0x18>
 76a:	21 f4       	brne	.+8      	; 0x774 <__divsf3+0x16>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	19 f0       	breq	.+6      	; 0x776 <__divsf3+0x18>
 770:	a2 c0       	rjmp	.+324    	; 0x8b6 <__fp_inf>
 772:	51 11       	cpse	r21, r1
 774:	2b c1       	rjmp	.+598    	; 0x9cc <__fp_szero>
 776:	ce c0       	rjmp	.+412    	; 0x914 <__fp_nan>

00000778 <__divsf3x>:
 778:	ef d0       	rcall	.+478    	; 0x958 <__fp_split3>
 77a:	98 f3       	brcs	.-26     	; 0x762 <__divsf3+0x4>

0000077c <__divsf3_pse>:
 77c:	99 23       	and	r25, r25
 77e:	c9 f3       	breq	.-14     	; 0x772 <__divsf3+0x14>
 780:	55 23       	and	r21, r21
 782:	b1 f3       	breq	.-20     	; 0x770 <__divsf3+0x12>
 784:	95 1b       	sub	r25, r21
 786:	55 0b       	sbc	r21, r21
 788:	bb 27       	eor	r27, r27
 78a:	aa 27       	eor	r26, r26
 78c:	62 17       	cp	r22, r18
 78e:	73 07       	cpc	r23, r19
 790:	84 07       	cpc	r24, r20
 792:	38 f0       	brcs	.+14     	; 0x7a2 <__divsf3_pse+0x26>
 794:	9f 5f       	subi	r25, 0xFF	; 255
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	22 0f       	add	r18, r18
 79a:	33 1f       	adc	r19, r19
 79c:	44 1f       	adc	r20, r20
 79e:	aa 1f       	adc	r26, r26
 7a0:	a9 f3       	breq	.-22     	; 0x78c <__divsf3_pse+0x10>
 7a2:	33 d0       	rcall	.+102    	; 0x80a <__divsf3_pse+0x8e>
 7a4:	0e 2e       	mov	r0, r30
 7a6:	3a f0       	brmi	.+14     	; 0x7b6 <__divsf3_pse+0x3a>
 7a8:	e0 e8       	ldi	r30, 0x80	; 128
 7aa:	30 d0       	rcall	.+96     	; 0x80c <__divsf3_pse+0x90>
 7ac:	91 50       	subi	r25, 0x01	; 1
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	e6 95       	lsr	r30
 7b2:	00 1c       	adc	r0, r0
 7b4:	ca f7       	brpl	.-14     	; 0x7a8 <__divsf3_pse+0x2c>
 7b6:	29 d0       	rcall	.+82     	; 0x80a <__divsf3_pse+0x8e>
 7b8:	fe 2f       	mov	r31, r30
 7ba:	27 d0       	rcall	.+78     	; 0x80a <__divsf3_pse+0x8e>
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	bb 1f       	adc	r27, r27
 7c4:	26 17       	cp	r18, r22
 7c6:	37 07       	cpc	r19, r23
 7c8:	48 07       	cpc	r20, r24
 7ca:	ab 07       	cpc	r26, r27
 7cc:	b0 e8       	ldi	r27, 0x80	; 128
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <__divsf3_pse+0x56>
 7d0:	bb 0b       	sbc	r27, r27
 7d2:	80 2d       	mov	r24, r0
 7d4:	bf 01       	movw	r22, r30
 7d6:	ff 27       	eor	r31, r31
 7d8:	93 58       	subi	r25, 0x83	; 131
 7da:	5f 4f       	sbci	r21, 0xFF	; 255
 7dc:	2a f0       	brmi	.+10     	; 0x7e8 <__divsf3_pse+0x6c>
 7de:	9e 3f       	cpi	r25, 0xFE	; 254
 7e0:	51 05       	cpc	r21, r1
 7e2:	68 f0       	brcs	.+26     	; 0x7fe <__divsf3_pse+0x82>
 7e4:	68 c0       	rjmp	.+208    	; 0x8b6 <__fp_inf>
 7e6:	f2 c0       	rjmp	.+484    	; 0x9cc <__fp_szero>
 7e8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ea:	ec f3       	brlt	.-6      	; 0x7e6 <__divsf3_pse+0x6a>
 7ec:	98 3e       	cpi	r25, 0xE8	; 232
 7ee:	dc f3       	brlt	.-10     	; 0x7e6 <__divsf3_pse+0x6a>
 7f0:	86 95       	lsr	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b7 95       	ror	r27
 7f8:	f7 95       	ror	r31
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c9 f7       	brne	.-14     	; 0x7f0 <__divsf3_pse+0x74>
 7fe:	88 0f       	add	r24, r24
 800:	91 1d       	adc	r25, r1
 802:	96 95       	lsr	r25
 804:	87 95       	ror	r24
 806:	97 f9       	bld	r25, 7
 808:	08 95       	ret
 80a:	e1 e0       	ldi	r30, 0x01	; 1
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	bb 1f       	adc	r27, r27
 814:	62 17       	cp	r22, r18
 816:	73 07       	cpc	r23, r19
 818:	84 07       	cpc	r24, r20
 81a:	ba 07       	cpc	r27, r26
 81c:	20 f0       	brcs	.+8      	; 0x826 <__divsf3_pse+0xaa>
 81e:	62 1b       	sub	r22, r18
 820:	73 0b       	sbc	r23, r19
 822:	84 0b       	sbc	r24, r20
 824:	ba 0b       	sbc	r27, r26
 826:	ee 1f       	adc	r30, r30
 828:	88 f7       	brcc	.-30     	; 0x80c <__divsf3_pse+0x90>
 82a:	e0 95       	com	r30
 82c:	08 95       	ret

0000082e <__fixsfsi>:
 82e:	04 d0       	rcall	.+8      	; 0x838 <__fixunssfsi>
 830:	68 94       	set
 832:	b1 11       	cpse	r27, r1
 834:	cb c0       	rjmp	.+406    	; 0x9cc <__fp_szero>
 836:	08 95       	ret

00000838 <__fixunssfsi>:
 838:	97 d0       	rcall	.+302    	; 0x968 <__fp_splitA>
 83a:	88 f0       	brcs	.+34     	; 0x85e <__fixunssfsi+0x26>
 83c:	9f 57       	subi	r25, 0x7F	; 127
 83e:	90 f0       	brcs	.+36     	; 0x864 <__fixunssfsi+0x2c>
 840:	b9 2f       	mov	r27, r25
 842:	99 27       	eor	r25, r25
 844:	b7 51       	subi	r27, 0x17	; 23
 846:	a0 f0       	brcs	.+40     	; 0x870 <__fixunssfsi+0x38>
 848:	d1 f0       	breq	.+52     	; 0x87e <__fixunssfsi+0x46>
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	1a f0       	brmi	.+6      	; 0x85a <__fixunssfsi+0x22>
 854:	ba 95       	dec	r27
 856:	c9 f7       	brne	.-14     	; 0x84a <__fixunssfsi+0x12>
 858:	12 c0       	rjmp	.+36     	; 0x87e <__fixunssfsi+0x46>
 85a:	b1 30       	cpi	r27, 0x01	; 1
 85c:	81 f0       	breq	.+32     	; 0x87e <__fixunssfsi+0x46>
 85e:	b5 d0       	rcall	.+362    	; 0x9ca <__fp_zero>
 860:	b1 e0       	ldi	r27, 0x01	; 1
 862:	08 95       	ret
 864:	b2 c0       	rjmp	.+356    	; 0x9ca <__fp_zero>
 866:	67 2f       	mov	r22, r23
 868:	78 2f       	mov	r23, r24
 86a:	88 27       	eor	r24, r24
 86c:	b8 5f       	subi	r27, 0xF8	; 248
 86e:	39 f0       	breq	.+14     	; 0x87e <__fixunssfsi+0x46>
 870:	b9 3f       	cpi	r27, 0xF9	; 249
 872:	cc f3       	brlt	.-14     	; 0x866 <__fixunssfsi+0x2e>
 874:	86 95       	lsr	r24
 876:	77 95       	ror	r23
 878:	67 95       	ror	r22
 87a:	b3 95       	inc	r27
 87c:	d9 f7       	brne	.-10     	; 0x874 <__fixunssfsi+0x3c>
 87e:	3e f4       	brtc	.+14     	; 0x88e <__fixunssfsi+0x56>
 880:	90 95       	com	r25
 882:	80 95       	com	r24
 884:	70 95       	com	r23
 886:	61 95       	neg	r22
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	8f 4f       	sbci	r24, 0xFF	; 255
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	08 95       	ret

00000890 <floor>:
 890:	85 d0       	rcall	.+266    	; 0x99c <__fp_trunc>
 892:	80 f0       	brcs	.+32     	; 0x8b4 <floor+0x24>
 894:	9f 37       	cpi	r25, 0x7F	; 127
 896:	40 f4       	brcc	.+16     	; 0x8a8 <floor+0x18>
 898:	91 11       	cpse	r25, r1
 89a:	0e f0       	brts	.+2      	; 0x89e <floor+0xe>
 89c:	97 c0       	rjmp	.+302    	; 0x9cc <__fp_szero>
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	80 e8       	ldi	r24, 0x80	; 128
 8a4:	9f eb       	ldi	r25, 0xBF	; 191
 8a6:	08 95       	ret
 8a8:	26 f4       	brtc	.+8      	; 0x8b2 <floor+0x22>
 8aa:	1b 16       	cp	r1, r27
 8ac:	61 1d       	adc	r22, r1
 8ae:	71 1d       	adc	r23, r1
 8b0:	81 1d       	adc	r24, r1
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__fp_mintl>
 8b4:	21 c0       	rjmp	.+66     	; 0x8f8 <__fp_mpack>

000008b6 <__fp_inf>:
 8b6:	97 f9       	bld	r25, 7
 8b8:	9f 67       	ori	r25, 0x7F	; 127
 8ba:	80 e8       	ldi	r24, 0x80	; 128
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	08 95       	ret

000008c2 <__fp_mintl>:
 8c2:	88 23       	and	r24, r24
 8c4:	71 f4       	brne	.+28     	; 0x8e2 <__fp_mintl+0x20>
 8c6:	77 23       	and	r23, r23
 8c8:	21 f0       	breq	.+8      	; 0x8d2 <__fp_mintl+0x10>
 8ca:	98 50       	subi	r25, 0x08	; 8
 8cc:	87 2b       	or	r24, r23
 8ce:	76 2f       	mov	r23, r22
 8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <__fp_mintl+0x1e>
 8d2:	66 23       	and	r22, r22
 8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_mintl+0x18>
 8d6:	99 27       	eor	r25, r25
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <__fp_mintl+0x32>
 8da:	90 51       	subi	r25, 0x10	; 16
 8dc:	86 2b       	or	r24, r22
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	2a f0       	brmi	.+10     	; 0x8ee <__fp_mintl+0x2c>
 8e4:	9a 95       	dec	r25
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	da f7       	brpl	.-10     	; 0x8e4 <__fp_mintl+0x22>
 8ee:	88 0f       	add	r24, r24
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__fp_mpack>:
 8f8:	9f 3f       	cpi	r25, 0xFF	; 255
 8fa:	31 f0       	breq	.+12     	; 0x908 <__stack+0x9>

000008fc <__fp_mpack_finite>:
 8fc:	91 50       	subi	r25, 0x01	; 1
 8fe:	20 f4       	brcc	.+8      	; 0x908 <__stack+0x9>
 900:	87 95       	ror	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b7 95       	ror	r27
 908:	88 0f       	add	r24, r24
 90a:	91 1d       	adc	r25, r1
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__fp_nan>:
 914:	9f ef       	ldi	r25, 0xFF	; 255
 916:	80 ec       	ldi	r24, 0xC0	; 192
 918:	08 95       	ret

0000091a <__fp_pscA>:
 91a:	00 24       	eor	r0, r0
 91c:	0a 94       	dec	r0
 91e:	16 16       	cp	r1, r22
 920:	17 06       	cpc	r1, r23
 922:	18 06       	cpc	r1, r24
 924:	09 06       	cpc	r0, r25
 926:	08 95       	ret

00000928 <__fp_pscB>:
 928:	00 24       	eor	r0, r0
 92a:	0a 94       	dec	r0
 92c:	12 16       	cp	r1, r18
 92e:	13 06       	cpc	r1, r19
 930:	14 06       	cpc	r1, r20
 932:	05 06       	cpc	r0, r21
 934:	08 95       	ret

00000936 <__fp_round>:
 936:	09 2e       	mov	r0, r25
 938:	03 94       	inc	r0
 93a:	00 0c       	add	r0, r0
 93c:	11 f4       	brne	.+4      	; 0x942 <__fp_round+0xc>
 93e:	88 23       	and	r24, r24
 940:	52 f0       	brmi	.+20     	; 0x956 <__fp_round+0x20>
 942:	bb 0f       	add	r27, r27
 944:	40 f4       	brcc	.+16     	; 0x956 <__fp_round+0x20>
 946:	bf 2b       	or	r27, r31
 948:	11 f4       	brne	.+4      	; 0x94e <__fp_round+0x18>
 94a:	60 ff       	sbrs	r22, 0
 94c:	04 c0       	rjmp	.+8      	; 0x956 <__fp_round+0x20>
 94e:	6f 5f       	subi	r22, 0xFF	; 255
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__fp_split3>:
 958:	57 fd       	sbrc	r21, 7
 95a:	90 58       	subi	r25, 0x80	; 128
 95c:	44 0f       	add	r20, r20
 95e:	55 1f       	adc	r21, r21
 960:	59 f0       	breq	.+22     	; 0x978 <__fp_splitA+0x10>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	71 f0       	breq	.+28     	; 0x982 <__fp_splitA+0x1a>
 966:	47 95       	ror	r20

00000968 <__fp_splitA>:
 968:	88 0f       	add	r24, r24
 96a:	97 fb       	bst	r25, 7
 96c:	99 1f       	adc	r25, r25
 96e:	61 f0       	breq	.+24     	; 0x988 <__fp_splitA+0x20>
 970:	9f 3f       	cpi	r25, 0xFF	; 255
 972:	79 f0       	breq	.+30     	; 0x992 <__fp_splitA+0x2a>
 974:	87 95       	ror	r24
 976:	08 95       	ret
 978:	12 16       	cp	r1, r18
 97a:	13 06       	cpc	r1, r19
 97c:	14 06       	cpc	r1, r20
 97e:	55 1f       	adc	r21, r21
 980:	f2 cf       	rjmp	.-28     	; 0x966 <__fp_split3+0xe>
 982:	46 95       	lsr	r20
 984:	f1 df       	rcall	.-30     	; 0x968 <__fp_splitA>
 986:	08 c0       	rjmp	.+16     	; 0x998 <__fp_splitA+0x30>
 988:	16 16       	cp	r1, r22
 98a:	17 06       	cpc	r1, r23
 98c:	18 06       	cpc	r1, r24
 98e:	99 1f       	adc	r25, r25
 990:	f1 cf       	rjmp	.-30     	; 0x974 <__fp_splitA+0xc>
 992:	86 95       	lsr	r24
 994:	71 05       	cpc	r23, r1
 996:	61 05       	cpc	r22, r1
 998:	08 94       	sec
 99a:	08 95       	ret

0000099c <__fp_trunc>:
 99c:	e5 df       	rcall	.-54     	; 0x968 <__fp_splitA>
 99e:	a0 f0       	brcs	.+40     	; 0x9c8 <__fp_trunc+0x2c>
 9a0:	be e7       	ldi	r27, 0x7E	; 126
 9a2:	b9 17       	cp	r27, r25
 9a4:	88 f4       	brcc	.+34     	; 0x9c8 <__fp_trunc+0x2c>
 9a6:	bb 27       	eor	r27, r27
 9a8:	9f 38       	cpi	r25, 0x8F	; 143
 9aa:	60 f4       	brcc	.+24     	; 0x9c4 <__fp_trunc+0x28>
 9ac:	16 16       	cp	r1, r22
 9ae:	b1 1d       	adc	r27, r1
 9b0:	67 2f       	mov	r22, r23
 9b2:	78 2f       	mov	r23, r24
 9b4:	88 27       	eor	r24, r24
 9b6:	98 5f       	subi	r25, 0xF8	; 248
 9b8:	f7 cf       	rjmp	.-18     	; 0x9a8 <__fp_trunc+0xc>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b1 1d       	adc	r27, r1
 9c2:	93 95       	inc	r25
 9c4:	96 39       	cpi	r25, 0x96	; 150
 9c6:	c8 f3       	brcs	.-14     	; 0x9ba <__fp_trunc+0x1e>
 9c8:	08 95       	ret

000009ca <__fp_zero>:
 9ca:	e8 94       	clt

000009cc <__fp_szero>:
 9cc:	bb 27       	eor	r27, r27
 9ce:	66 27       	eor	r22, r22
 9d0:	77 27       	eor	r23, r23
 9d2:	cb 01       	movw	r24, r22
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <__mulsf3>:
 9d8:	0b d0       	rcall	.+22     	; 0x9f0 <__mulsf3x>
 9da:	ad cf       	rjmp	.-166    	; 0x936 <__fp_round>
 9dc:	9e df       	rcall	.-196    	; 0x91a <__fp_pscA>
 9de:	28 f0       	brcs	.+10     	; 0x9ea <__mulsf3+0x12>
 9e0:	a3 df       	rcall	.-186    	; 0x928 <__fp_pscB>
 9e2:	18 f0       	brcs	.+6      	; 0x9ea <__mulsf3+0x12>
 9e4:	95 23       	and	r25, r21
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__mulsf3+0x12>
 9e8:	66 cf       	rjmp	.-308    	; 0x8b6 <__fp_inf>
 9ea:	94 cf       	rjmp	.-216    	; 0x914 <__fp_nan>
 9ec:	11 24       	eor	r1, r1
 9ee:	ee cf       	rjmp	.-36     	; 0x9cc <__fp_szero>

000009f0 <__mulsf3x>:
 9f0:	b3 df       	rcall	.-154    	; 0x958 <__fp_split3>
 9f2:	a0 f3       	brcs	.-24     	; 0x9dc <__mulsf3+0x4>

000009f4 <__mulsf3_pse>:
 9f4:	95 9f       	mul	r25, r21
 9f6:	d1 f3       	breq	.-12     	; 0x9ec <__mulsf3+0x14>
 9f8:	95 0f       	add	r25, r21
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	55 1f       	adc	r21, r21
 9fe:	62 9f       	mul	r22, r18
 a00:	f0 01       	movw	r30, r0
 a02:	72 9f       	mul	r23, r18
 a04:	bb 27       	eor	r27, r27
 a06:	f0 0d       	add	r31, r0
 a08:	b1 1d       	adc	r27, r1
 a0a:	63 9f       	mul	r22, r19
 a0c:	aa 27       	eor	r26, r26
 a0e:	f0 0d       	add	r31, r0
 a10:	b1 1d       	adc	r27, r1
 a12:	aa 1f       	adc	r26, r26
 a14:	64 9f       	mul	r22, r20
 a16:	66 27       	eor	r22, r22
 a18:	b0 0d       	add	r27, r0
 a1a:	a1 1d       	adc	r26, r1
 a1c:	66 1f       	adc	r22, r22
 a1e:	82 9f       	mul	r24, r18
 a20:	22 27       	eor	r18, r18
 a22:	b0 0d       	add	r27, r0
 a24:	a1 1d       	adc	r26, r1
 a26:	62 1f       	adc	r22, r18
 a28:	73 9f       	mul	r23, r19
 a2a:	b0 0d       	add	r27, r0
 a2c:	a1 1d       	adc	r26, r1
 a2e:	62 1f       	adc	r22, r18
 a30:	83 9f       	mul	r24, r19
 a32:	a0 0d       	add	r26, r0
 a34:	61 1d       	adc	r22, r1
 a36:	22 1f       	adc	r18, r18
 a38:	74 9f       	mul	r23, r20
 a3a:	33 27       	eor	r19, r19
 a3c:	a0 0d       	add	r26, r0
 a3e:	61 1d       	adc	r22, r1
 a40:	23 1f       	adc	r18, r19
 a42:	84 9f       	mul	r24, r20
 a44:	60 0d       	add	r22, r0
 a46:	21 1d       	adc	r18, r1
 a48:	82 2f       	mov	r24, r18
 a4a:	76 2f       	mov	r23, r22
 a4c:	6a 2f       	mov	r22, r26
 a4e:	11 24       	eor	r1, r1
 a50:	9f 57       	subi	r25, 0x7F	; 127
 a52:	50 40       	sbci	r21, 0x00	; 0
 a54:	8a f0       	brmi	.+34     	; 0xa78 <__mulsf3_pse+0x84>
 a56:	e1 f0       	breq	.+56     	; 0xa90 <__mulsf3_pse+0x9c>
 a58:	88 23       	and	r24, r24
 a5a:	4a f0       	brmi	.+18     	; 0xa6e <__mulsf3_pse+0x7a>
 a5c:	ee 0f       	add	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	bb 1f       	adc	r27, r27
 a62:	66 1f       	adc	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	91 50       	subi	r25, 0x01	; 1
 a6a:	50 40       	sbci	r21, 0x00	; 0
 a6c:	a9 f7       	brne	.-22     	; 0xa58 <__mulsf3_pse+0x64>
 a6e:	9e 3f       	cpi	r25, 0xFE	; 254
 a70:	51 05       	cpc	r21, r1
 a72:	70 f0       	brcs	.+28     	; 0xa90 <__mulsf3_pse+0x9c>
 a74:	20 cf       	rjmp	.-448    	; 0x8b6 <__fp_inf>
 a76:	aa cf       	rjmp	.-172    	; 0x9cc <__fp_szero>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	ec f3       	brlt	.-6      	; 0xa76 <__mulsf3_pse+0x82>
 a7c:	98 3e       	cpi	r25, 0xE8	; 232
 a7e:	dc f3       	brlt	.-10     	; 0xa76 <__mulsf3_pse+0x82>
 a80:	86 95       	lsr	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	b7 95       	ror	r27
 a88:	f7 95       	ror	r31
 a8a:	e7 95       	ror	r30
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	c1 f7       	brne	.-16     	; 0xa80 <__mulsf3_pse+0x8c>
 a90:	fe 2b       	or	r31, r30
 a92:	88 0f       	add	r24, r24
 a94:	91 1d       	adc	r25, r1
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__divmodhi4>:
 a9e:	97 fb       	bst	r25, 7
 aa0:	07 2e       	mov	r0, r23
 aa2:	16 f4       	brtc	.+4      	; 0xaa8 <__divmodhi4+0xa>
 aa4:	00 94       	com	r0
 aa6:	07 d0       	rcall	.+14     	; 0xab6 <__divmodhi4_neg1>
 aa8:	77 fd       	sbrc	r23, 7
 aaa:	09 d0       	rcall	.+18     	; 0xabe <__divmodhi4_neg2>
 aac:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodhi4>
 ab0:	07 fc       	sbrc	r0, 7
 ab2:	05 d0       	rcall	.+10     	; 0xabe <__divmodhi4_neg2>
 ab4:	3e f4       	brtc	.+14     	; 0xac4 <__divmodhi4_exit>

00000ab6 <__divmodhi4_neg1>:
 ab6:	90 95       	com	r25
 ab8:	81 95       	neg	r24
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__divmodhi4_neg2>:
 abe:	70 95       	com	r23
 ac0:	61 95       	neg	r22
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ac4 <__divmodhi4_exit>:
 ac4:	08 95       	ret

00000ac6 <__udivmodhi4>:
 ac6:	aa 1b       	sub	r26, r26
 ac8:	bb 1b       	sub	r27, r27
 aca:	51 e1       	ldi	r21, 0x11	; 17
 acc:	07 c0       	rjmp	.+14     	; 0xadc <__udivmodhi4_ep>

00000ace <__udivmodhi4_loop>:
 ace:	aa 1f       	adc	r26, r26
 ad0:	bb 1f       	adc	r27, r27
 ad2:	a6 17       	cp	r26, r22
 ad4:	b7 07       	cpc	r27, r23
 ad6:	10 f0       	brcs	.+4      	; 0xadc <__udivmodhi4_ep>
 ad8:	a6 1b       	sub	r26, r22
 ada:	b7 0b       	sbc	r27, r23

00000adc <__udivmodhi4_ep>:
 adc:	88 1f       	adc	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	5a 95       	dec	r21
 ae2:	a9 f7       	brne	.-22     	; 0xace <__udivmodhi4_loop>
 ae4:	80 95       	com	r24
 ae6:	90 95       	com	r25
 ae8:	bc 01       	movw	r22, r24
 aea:	cd 01       	movw	r24, r26
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
